import re

def extract_includes(file_path):
    includes = []
    with open(file_path, 'r') as file:
        for line in file:
            match = re.match(r'^#include "(.*)"', line)
            if match:
                includes.append(match.group(1))
    return includes

def generate_task(file_path):
    includes = extract_includes(file_path)
    source_files = ['path/to/' + include.replace('.h', '.c') for include in includes]
    
    task = {
        "type": "cppbuild",
        "label": "C/C++: gcc.exe build active file",
        "command": "C:\\msys64\\ucrt64\\bin\\gcc.exe",
        "args": [
            "-fdiagnostics-color=always",
            "-g",
            file_path,
            *source_files,  # Dynamisch hinzugef√ºgte Quelldateien
            "-o",
            "${fileDirname}\\${fileBasenameNoExtension}.exe"
        ],
        "options": {
            "cwd": "${fileDirname}"
        },
        "problemMatcher": [
            "$gcc"
        ],
        "group": {
            "kind": "build",
            "isDefault": true
        },
        "detail": "Task generated by Debugger."
    }
    return task

if __name__ == "__main__":
    file_path = "path/to/your/source/file.c"
    task = generate_task(file_path)
    print(task)  # Dieser Ausdruck druckt die generierte Task-Konfiguration aus
